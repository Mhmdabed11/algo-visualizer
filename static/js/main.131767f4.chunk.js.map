{"version":3,"sources":["components/ShortestPath.js","components/Node.js","algorithms/BFS.js","App.js","serviceWorker.js","index.js"],"names":["Node","React","forwardRef","ref","type","children","typeClassName","visited","path","className","cloneDeep","require","BFS","graph","start","end","newGraph","queue","animatedNodes","row","col","push","queueHead","shift","getUnvisitedNeighbors","forEach","neighbor","parent","length","node","neighbors","filter","getShortestPath","currentNode","shortestPath","GraphNode","this","distance","Infinity","Graph","i","temp","j","PathFindingVisualizer","useState","setGraph","startNode","setStartNode","endNode","setEndNode","grid","useRef","map","createRef","onClick","nodesInShortestPathOrder","reverse","setTimeout","current","classList","add","item","subItem","el","key","App","Boolean","window","location","hostname","match","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"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","file":"static/js/main.131767f4.chunk.js","sourcesContent":["import React from \"react\";\r\nimport \"./ShortestPath.css\";\r\nimport Node from \"./Node\";\r\nimport { BFS, getShortestPath } from \"../algorithms/BFS\";\r\n\r\nclass GraphNode {\r\n  constructor(row, col) {\r\n    this.row = row;\r\n    this.col = col;\r\n    this.visited = false;\r\n    this.distance = Infinity;\r\n  }\r\n}\r\n\r\nconst NUM_COLUMNS = 100;\r\nconst NUM_ROWS = 35;\r\n\r\nconst Graph = [];\r\nfor (let i = 0; i < NUM_ROWS; i++) {\r\n  let temp = [];\r\n  for (let j = 0; j < NUM_COLUMNS; j++) {\r\n    temp.push(new GraphNode(i, j));\r\n  }\r\n  Graph.push(temp);\r\n}\r\n\r\nexport default function PathFindingVisualizer() {\r\n  const START_ROW = 10;\r\n  const START_COL = 15;\r\n  const END_ROW = 30;\r\n  const END_COL = 54;\r\n\r\n  const [graph, setGraph] = React.useState(Graph);\r\n  const [startNode, setStartNode] = React.useState({\r\n    row: START_ROW,\r\n    col: START_COL\r\n  });\r\n  const [endNode, setEndNode] = React.useState({ row: END_ROW, col: END_COL });\r\n  const grid = React.useRef(\r\n    Graph.map(row => {\r\n      return row.map(col => {\r\n        return React.createRef();\r\n      });\r\n    })\r\n  );\r\n\r\n  const handleFindShortestPath = () => {\r\n    setGraph(Graph);\r\n    const start = Graph[START_ROW][START_COL];\r\n    const end = Graph[END_ROW][END_COL];\r\n    setStartNode(start);\r\n    setEndNode(end);\r\n    const { animatedNodes, newGraph } = BFS(Graph, start, end);\r\n    const nodesInShortestPathOrder = getShortestPath(\r\n      newGraph[END_ROW][END_COL]\r\n    ).reverse();\r\n\r\n    setGraph(newGraph);\r\n\r\n    for (let i = 0; i < animatedNodes.length; i++) {\r\n      if (\r\n        !(\r\n          animatedNodes[i].row === start.row &&\r\n          animatedNodes[i].col === start.col\r\n        ) &&\r\n        !(animatedNodes[i].row === end.row && animatedNodes[i].col === end.col)\r\n      ) {\r\n        setTimeout(\r\n          () =>\r\n            grid.current[animatedNodes[i].row][\r\n              animatedNodes[i].col\r\n            ].classList.add(\"animate-node\"),\r\n          15 * i\r\n        );\r\n      }\r\n    }\r\n\r\n    for (let i = 0; i < nodesInShortestPathOrder.length; i++) {\r\n      if (\r\n        !(\r\n          nodesInShortestPathOrder[i].row === start.row &&\r\n          nodesInShortestPathOrder[i].col === start.col\r\n        ) &&\r\n        !(\r\n          nodesInShortestPathOrder[i].row === end.row &&\r\n          nodesInShortestPathOrder[i].col === end.col\r\n        )\r\n      ) {\r\n        setTimeout(\r\n          () =>\r\n            grid.current[nodesInShortestPathOrder[i].row][\r\n              nodesInShortestPathOrder[i].col\r\n            ].classList.add(\"animate-path\"),\r\n          15 * (animatedNodes.length - 1) + 20 * i\r\n        );\r\n      }\r\n    }\r\n  };\r\n\r\n  return (\r\n    <>\r\n      <button onClick={handleFindShortestPath}>Find Shortest Path</button>\r\n      <div className=\"grid\">\r\n        {graph.map(item => {\r\n          return item.map(subItem => {\r\n            if (\r\n              subItem.row === startNode.row &&\r\n              subItem.col === startNode.col\r\n            ) {\r\n              return (\r\n                <Node\r\n                  ref={el => (grid.current[subItem.row][subItem.col] = el)}\r\n                  key={`${subItem.row}-${subItem.col}`}\r\n                  type=\"start\"\r\n                />\r\n              );\r\n            } else if (\r\n              subItem.row === endNode.row &&\r\n              subItem.col === endNode.col\r\n            ) {\r\n              return (\r\n                <Node\r\n                  ref={el => (grid.current[subItem.row][subItem.col] = el)}\r\n                  key={`${subItem.row}-${subItem.col}`}\r\n                  type=\"finish\"\r\n                />\r\n              );\r\n            }\r\n            return (\r\n              <Node\r\n                ref={el => (grid.current[subItem.row][subItem.col] = el)}\r\n                key={`${subItem.row}-${subItem.col}`}\r\n                visited={subItem.visited}\r\n                path={subItem.path}\r\n              ></Node>\r\n            );\r\n          });\r\n        })}\r\n      </div>\r\n    </>\r\n  );\r\n}\r\n","import React from \"react\";\r\nimport \"./Node.css\";\r\n\r\nconst Node = React.forwardRef(({ type, children, visited, path }, ref) => {\r\n  let typeClassName = \"\";\r\n  if (type === \"start\" || type === \"finish\") {\r\n    typeClassName = `is-${type}`;\r\n  }\r\n  return (\r\n    <div ref={ref} className={`grid-item ${typeClassName} `}>\r\n      {children}\r\n    </div>\r\n  );\r\n});\r\n\r\nexport default Node;\r\n","var cloneDeep = require(\"lodash.clonedeep\");\r\n\r\nexport const BFS = (graph, start, end) => {\r\n  const newGraph = cloneDeep(graph);\r\n  let queue = [];\r\n  let animatedNodes = [];\r\n  newGraph[start.row][start.col].visited = true;\r\n  queue.push(newGraph[start.row][start.col]);\r\n  while (queue.length !== 0) {\r\n    let queueHead = queue.shift();\r\n    animatedNodes.push(queueHead);\r\n    if (queueHead.row === end.row && queueHead.col === end.col)\r\n      return { animatedNodes, newGraph };\r\n    let unvisitedNeighbors = getUnvisitedNeighbors(queueHead, newGraph);\r\n    unvisitedNeighbors.forEach(neighbor => {\r\n      if (!neighbor.visited) {\r\n        neighbor.visited = true;\r\n        neighbor.parent = queueHead;\r\n        queue.push(neighbor);\r\n      }\r\n    });\r\n  }\r\n};\r\n\r\nconst getUnvisitedNeighbors = (node, graph) => {\r\n  let neighbors = [];\r\n  const { row, col } = node;\r\n  if (row < graph.length - 1) neighbors.push(graph[row + 1][col]);\r\n  if (row > 0) neighbors.push(graph[row - 1][col]);\r\n  if (col < graph[0].length - 1) neighbors.push(graph[row][col + 1]);\r\n  if (col > 0) neighbors.push(graph[row][col - 1]);\r\n  neighbors = neighbors.filter(neighbor => !neighbor.visited);\r\n\r\n  return neighbors;\r\n};\r\n\r\nexport const getShortestPath = end => {\r\n  let currentNode = end;\r\n  let shortestPath = [];\r\n  while (currentNode) {\r\n    shortestPath.push(currentNode);\r\n    currentNode = currentNode.parent;\r\n  }\r\n  return shortestPath;\r\n};\r\n","import React from \"react\";\nimport ShortestPath from \"./components/ShortestPath\";\n\nfunction App() {\n  return (\n    <div className=\"App\">\n      <ShortestPath />\n    </div>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' }\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}